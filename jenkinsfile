import com.cloudbees.hudson.plugins.modeling.*
pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M2_HOME"
    }
    stages {
            stage('load parameters') { 
            steps {
                load "parameters.groovy"
            }
        }	
        stage('SAST Analysis') {
            steps {
                script {
                    try {
                // Get some code from a GitHub repository
						if (env.SAST_GIT_URL != 'null') {				
                git "${env.SAST_GIT_URL}"
                bat "git clone https://github.com/harishpallapu/sonarqube_scannar_windows.git"
                bat "./sonarqube_scannar_windows/sonar-scanner-4.6.2.2472-windows/bin/sonar-scanner.bat"
					        } else {
                                                        echo "skipping the stage ${env.STAGE_NAME}.............................!"				
                   } } catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed...............!"
						}                
                // Run Maven on a Unix agent.
                //sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        } 
        }
        stage('SCA') {
            steps {
			      script {
						try {
							bat '''
							wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.2.2/dependency-check-6.2.2-release.zip
							 PowerShell Expand-Archive -Path "dependency-check-6.2.2-release.zip"  
							./dependency-check-6.2.2-release/dependency-check/bin/dependency-check.bat --noupdate --project "TeachersFCU" --scan "Shoppingcart/lib/" --format HTML --out .
						    '''
						} catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"
						}
				}

	    }
        }
	stage('build') {
            steps {
				script {
						try {
						if (env.BUILD_GIT_URL != 'null') {
                git "${env.BUILD_GIT_URL}"
							bat 'mvn clean package'
					        } else {
                                                        echo 'skipping the stage ${env.STAGE_NAME}.............................!'
                                                        }							
						} catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"
						}
				}							
            }
	 }
     stage("deploye") {
         steps {
					script {
						try {
						if (env.TOMCAT_IP != 'null') {						
            deploy adapters: [tomcat8(credentialsId: 'f9e5d28d-6a35-4704-a1bd-6676011dd79a', path: '', url: '${env.TOMCAT_IP}')], contextPath: null, onFailure: false, war: '**/*.war'
					        } else {
                                                        echo 'skipping the stage ${env.STAGE_NAME}.............................!'	    
					}	} catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"
						}		
					}
				}
	}
	stage('FunctionalAutomation_Web') {
           			steps {
		   			script {
						try {
						if (env.FUNCTIONAL_WEB_GIT_URL != 'null') {						
							bat """git clone ${env.FUNCTIONAL_WEB_GIT_URL}
							cd webtest
							mvn test """
					        } else {
                                                        echo 'skipping the stage ${env.STAGE_NAME}.............................!'														
					}	} catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"
						}					
					}
	 		}
	 }
	stage('FunctionalAutomation_Mobile') {
            				steps {
		   			script {
						try {
						if (env.FUNCTIONAL_MOBILE_GIT_URL != 'null') {						
							bat """ git clone ${env.FUNCTIONAL_MOBILE_GIT_URL}
							cd mobiletest
							mvn test """
					        } else {
                                                        echo 'skipping the stage ${env.STAGE_NAME}.............................!'							
					}	} catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"
							}
					}
				}
	}
        stage('DAST') {
            steps {
                script {
                    try {
						if (env.DAST_IP != 'null') {		    
                       arachniScanner checks: '*', format: 'html', url: 'http://mypublicip:8084/SpringMVCAnnotationShoppingCart/'
					        } else {
                                                        echo 'skipping the stage ${env.STAGE_NAME}.............................!'                       
             }       } catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"                       
                    }
                }
            }
        }
        stage('Performance') {
            			steps {
		   			script {
						try {
						if (env.JMETER_GIT_URL != 'null') {						
							bat '''dir
                            git clone ${env.JMETER_GIT_URL}
                            cd folder
                            C:/Windows/System32/config/systemprofile/AppData/Local/Jenkins/.jenkins/workspace/sample2/folder/apache-jmeter-5.4.1/apache-jmeter-5.4.1/bin/jmeter.bat -n -t OnlineShop_1.jmx -l OnlineShop_result.jtl -e -o OnlineShop_%BUILD_NUMBER%.html
            					 '''
					        } else {
                                                        echo 'skipping the stage ${env.STAGE_NAME}.............................!'						 
            				}	} catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"
							}
					}
			}
		}	
		}
}
