pipeline {
    agent any 
    stages {
        stage('LOAD PARAMETERS') { 
            steps {
                //
               load "parameters.groovy"
            }
        }
        stage('Test') { 
            steps {
                // 
                script {
                    try {
                // Get some code from a GitHub repository
						if (env.SAST_GIT_URL != 'null') {				
                git "${env.SAST_GIT_URL}"
                bat "git clone https://github.com/harishpallapu/sonarqube_scannar_windows.git"
                bat "./sonarqube_scannar_windows/sonar-scanner-4.6.2.2472-windows/bin/sonar-scanner.bat"
					        } else {
                                                        echo "skipping the stage ${env.STAGE_NAME}.............................!"				
                   } } catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed...............!"
						}                
                // Run Maven on a Unix agent.
                //sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        } 
        }
        stage('SCA') {
            steps {
			      script {
						try {
							bat '''
							wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.2.2/dependency-check-6.2.2-release.zip
							 PowerShell Expand-Archive -Path "dependency-check-6.2.2-release.zip"  
							./dependency-check-6.2.2-release/dependency-check/bin/dependency-check.bat --noupdate --project "TeachersFCU" --scan "Shoppingcart/lib/" --format HTML --out .
						    '''
						} catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"
						}
				}

	    }
        }
	stage('build') {
            steps {
				script {
						try {
						if (env.BUILD_GIT_URL != 'null') {
                git "${env.BUILD_GIT_URL}"
							bat 'mvn clean package'
					        } else {
                                                        echo 'skipping the stage ${env.STAGE_NAME}.............................!'
                                                        }							
						} catch (err) {
							echo err.getMessage()
							unstable(message: "${STAGE_NAME} is unstable")
							echo "Error detected, ${env.STAGE_NAME} failed..................!"
						}
				}							
            }
	 }
}
}
